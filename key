-- Fluent UI Setup
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local key = ""

-- Plato API Setup (replace these with your actual values)
local service = 1095  -- Your service ID
local secret = "92a9fbaf-cc2d-4afc-89f5-d0d0c8392241"  -- Your secret key
local host = "https://api.platoboost.com"

-- Helper Functions
local fRequest = request or http.request or http_request or syn.request
local fToString = tostring
local fGetHwid = gethwid or function() return game:GetService("Players").LocalPlayer.UserId end
local fOsTime = os.time

-- Plato Cache Setup
local cachedLink, cachedTime = "", 0

local function cacheLink()
    if cachedTime + (10 * 60) < fOsTime() then
        local response = fRequest({
            Url = host .. "/public/start",
            Method = "POST",
            Body = game:GetService('HttpService'):JSONEncode({
                service = service,
                identifier = fGetHwid()
            }),
            Headers = {
                ["Content-Type"] = "application/json"
            }
        })

        -- Debug the API request
        if response then
            print("Response Status:", response.StatusCode)
            print("Response Body:", response.Body)
        else
            print("HTTP Request Failed.")
            return false, "HTTP request failed."
        end

        if response.StatusCode == 200 then
            local decoded = game:GetService('HttpService'):JSONDecode(response.Body)
            if decoded.success then
                cachedLink = decoded.data.url
                cachedTime = fOsTime()
                return true, cachedLink
            else
                print("API Error:", decoded.message)
                return false, decoded.message
            end
        else
            print("HTTP Request Failed: Status Code", response.StatusCode)
            return false, "Failed to cache link"
        end
    else
        return true, cachedLink
    end
end

local function generateNonce()
    local str = ""
    for _ = 1, 16 do
        str = str .. string.char(math.floor(math.random() * (122 - 97 + 1)) + 97)
    end
    return str
end

-- Whitelist keys
local whitelist = {
    "KEY_crip213",
    "KEY_ego213",
    "KEY_dan521"
}

local function verifyKey(key)
    for _, whitelistedKey in ipairs(whitelist) do
        if key == whitelistedKey then
            loadstring(game:HttpGet("https://raw.githubusercontent.com/Zayn312142/thing/refs/heads/main/crypto"))()
            print("Whitelisted key detected. Access granted!")
            return true
        end
    end

    local nonce = generateNonce()
    local endpoint = host .. "/public/whitelist/" .. fToString(service) .. "?identifier=" .. fGetHwid() .. "&key=" .. key

    local response = fRequest({
        Url = endpoint,
        Method = "GET",
    })

    if response.StatusCode == 200 then
        local decoded = game:GetService('HttpService'):JSONDecode(response.Body)
        if decoded.success then
            if decoded.data.valid then
                loadstring(game:HttpGet("https://raw.githubusercontent.com/Zayn312142/thing/refs/heads/main/crypto"))()
                print("Valid key detected. Access granted!")
                return true
            else
                print("Key is invalid.")
                return false
            end
        else
            print("API Error:", decoded.message)
            return false
        end
    else
        print("Server error. Status Code:", response.StatusCode)
        return false
    end
end

-- Fluent UI Setup
local Window = Fluent:CreateWindow({
    Title = "Key System",
    SubTitle = "SterlingHub",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 340),
    Acrylic = false,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    KeySys = Window:AddTab({ Title = "Key System", Icon = "key" }),
}

-- Create the Key Input Box
local Entkey = Tabs.KeySys:AddInput("Input", {
    Title = "Enter Key",
    Description = "Enter Key Here",
    Default = "",
    Placeholder = "Enter keyâ€¦",
    Numeric = false,
    Finished = false,
    Callback = function(Value)
        key = Value
    end
})

-- "Check Key" Button
Tabs.KeySys:AddButton({
    Title = "Check Key",
    Description = "Enter Key before pressing this button",
    Callback = function()
        if verifyKey(key) then
            print("Key is valid!")
            Fluent:Unload()
        else
            print("Key is invalid")
            game:GetService('StarterGui'):SetCore('SendNotification', {
                Title = 'Invalid Key',
                Text = 'The entered key is not valid.',
                Duration = 5
            })
        end
    end
})

-- "Get Key" Button
Tabs.KeySys:AddButton({
    Title = "Get Key",
    Description = "Get Key here",
    Callback = function()
        local success, link = cacheLink()
        if success then
            print("Key Link:", link)
            setclipboard(link)
            game:GetService('StarterGui'):SetCore('SendNotification', {
                Title = 'Key Link Copied',
                Text = 'Key link copied to clipboard.',
                Duration = 5
            })
        else
            print("Failed to generate key link.")
            game:GetService('StarterGui'):SetCore('SendNotification', {
                Title = 'Error',
                Text = 'Failed to generate key link.',
                Duration = 5
            })
        end
    end
})

Window:SelectTab(1)
