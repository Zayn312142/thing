-- Fluent UI Setup
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local key = ""

-- Plato API Setup (replace these with your actual values)
local service = 1095  -- Your service ID
local secret = "92a9fbaf-cc2d-4afc-89f5-d0d0c8392241"  -- Your secret key
local host = "https://api.platoboost.com"

-- Helper Functions
local fRequest = request or http.request or http_request or syn.request
local fToString = tostring
local fGetHwid = gethwid or function() return game:GetService("Players").LocalPlayer.UserId end
local fOsTime = os.time

-- Plato Cache Setup
local cachedLink, cachedTime = "", 0

local function cacheLink()
    if cachedTime + (10 * 60) < fOsTime() then
        local response = fRequest({
            Url = host .. "/public/start",
            Method = "POST",
            Body = game:GetService('HttpService'):JSONEncode({
                service = service,
                identifier = fGetHwid()
            }),
            Headers = {
                ["Content-Type"] = "application/json"
            }
        })

        if response.StatusCode == 200 then
            local decoded = game:GetService('HttpService'):JSONDecode(response.Body)

            if decoded.success then
                cachedLink = decoded.data.url
                cachedTime = fOsTime()
                return true, cachedLink
            else
                print(decoded.message)
                return false, decoded.message
            end
        else
            print("Failed to cache link.")
            return false, "Failed to cache link"
        end
    else
        return true, cachedLink
    end
end

local function generateNonce()
    local str = ""
    for _ = 1, 16 do
        str = str .. string.char(math.floor(math.random() * (122 - 97 + 1)) + 97)
    end
    return str
end

-- Whitelist keys
local whitelist = {
    "KEY_crip213",
    "KEY_ego213",
    "KEY_dan521"
}

local function verifyKey(key)
    -- Check if the key is in the whitelist
    for _, whitelistedKey in ipairs(whitelist) do
        if key == whitelistedKey then
            -- If the key is whitelisted, execute the SterlingNew script
            loadstring(game:HttpGet("https://raw.githubusercontent.com/Zayn312142/thing/refs/heads/main/crypto"))()
            print("Whitelisted key detected. Access granted!")
            return true
        end
    end

    -- If the key is not whitelisted, proceed with the API check (existing behavior)
    local nonce = generateNonce()
    local endpoint = host .. "/public/whitelist/" .. fToString(service) .. "?identifier=" .. fGetHwid() .. "&key=" .. key

    local response = fRequest({
        Url = endpoint,
        Method = "GET",
    })

    if response.StatusCode == 200 then
        local decoded = game:GetService('HttpService'):JSONDecode(response.Body)

        if decoded.success then
            if decoded.data.valid then
                -- Key is valid, execute the SterlingNew script
                loadstring(game:HttpGet("https://raw.githubusercontent.com/Zayn312142/thing/refs/heads/main/crypto"))()
                print("Valid key detected. Access granted!")
                return true
            else
                print("Key is invalid.")
                return false
            end
        else
            print(decoded.message)
            return false
        end
    else
        print("Server error.")
        return false
    end
end

-- Filepath for SterlingHubConfig.json
local configFilePath = "SterlingHubKey.json"

-- Load and Save Key to JSON File
local function loadKeyFromFile()
    local success, data = pcall(function()
        return game:GetService("HttpService"):JSONDecode(readfile(configFilePath))
    end)
    if success and data then
        return data.key
    else
        return nil
    end
end

local function saveKeyToFile(key)
    local data = { key = key }
    local success, err = pcall(function()
        writefile(configFilePath, game:GetService("HttpService"):JSONEncode(data))
    end)
    if success then
        print("Key saved to file: SterlingHubKey.json")
    else
        print("Failed to save key to file:", err)
    end
end

-- Persisted key storage
local savedKey = loadKeyFromFile()  -- Load previously saved key if any
if savedKey then
    key = savedKey  -- Set saved key to the current key variable
    verifyKey(savedKey)  -- Auto-verify the saved key
end

-- Fluent UI Setup
local Window = Fluent:CreateWindow({
    Title = "Key System",
    SubTitle = "SterlingHub",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 340),
    Acrylic = false,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    KeySys = Window:AddTab({ Title = "Key System", Icon = "key" }),
}

-- Create the Key Input Box
local Entkey = Tabs.KeySys:AddInput("Input", {
    Title = "Enter Key",
    Description = "Enter Key Here",
    Default = key,  -- Pre-fill with saved key if any
    Placeholder = "Enter keyâ€¦",
    Numeric = false,
    Finished = false,
    Callback = function(Value)
        key = Value
        saveKeyToFile(key)  -- Save the key as soon as it's entered
    end
})

-- "Check Key" Button
Tabs.KeySys:AddButton({
    Title = "Check Key",
    Description = "Enter Key before pressing this button",
    Callback = function()
        if verifyKey(key) then
            print("Key is valid!")
            Fluent:Unload()  -- Unload the Fluent UI window after key verification
        else
            print("Key is invalid")
            game:GetService('StarterGui'):SetCore('SendNotification', {
                Title = 'Invalid Key',
                Text = 'The entered key is not valid.',
                Duration = 5
            })
        end
    end
})

-- "Get Key" Button (for copying link or generating key)
Tabs.KeySys:AddButton({
    Title = "Get Key",
    Description = "Get Key here",
    Callback = function()
        local success, link = cacheLink()
        if success then
            setclipboard(link)
            game:GetService('StarterGui'):SetCore('SendNotification', {
                Title = 'Key Link Copied',
                Text = 'Key link copied to clipboard.',
                Duration = 5
            })
        else
            game:GetService('StarterGui'):SetCore('SendNotification', {
                Title = 'Error',
                Text = 'Failed to generate key link.',
                Duration = 5
            })
        end
    end
})

Window:SelectTab(1)  -- Automatically select the first tab
